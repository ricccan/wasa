openapi: 3.0.0
info: 
  description: WASAText exam project Rest API
  title: WASAText
  version: 1.0.0
servers:
- url: http://localhost:3000
components:
  schemas:
    user:
      title: user
      description: "This object represent the unique name of the user (\"user\")."
      type: object
      properties:
        u_id:
          description: unique identifier
          type: integer
        u_username:
          description: Unique name of the user
          type: string
          pattern: '^.*?$'
          minLength: 1
          maxLength: 32
        u_profileImage:
          description: profile picture of the user
          type: string
          pattern: '^.*?$'
          format: binary
        u_bio:
          description: biography of the user
          type: string
          pattern: '^.*?$'
          minLength: 1
          maxLength: 256
        u_firstName:
          description: the real name of the user 
          type: string
          pattern: '^.*?$'
          minLength: 1
          maxLength: 32
        u_lastName:
          description: the real surname of the user
          type: string
          pattern: '^.*?$'
          minLength: 1
          maxLength: 32
    textMessage:
      title: text message
      description: a simple text between users
      type: object
      properties:
        t_id: 
          description: unique identifier
          type: integer
        t_textContent:
          description: the text content of the message
          type: string
          pattern: '^.*?$'
          minLength: 0
          maxLength: 256
        t_preview: 
          description: the snippet of the text
          type: string
          pattern: '^.*?$'
          minLength: 1
          maxLength: 32
        t_sender:
          description: the username of the user who has sent the message
          type: string
          pattern: '^.*?$'
          minLength: 1
          maxLength: 32
        t_date:
          description: the date of the sent message 
          type: number
        t_checkmark:
          description: the graphic rappresentation of the state of the message, seen or just delivered
          type: integer
          enum: [1, 2]
        t_responseTo:
          description: if the text is a reaction to another message, here is the id of that message. zero means that it isn t a response to another message
          type: integer
        t_photoContent:
          description: the url of the photo, if its empty then this is a simple text message
          type: string
          format: binary
        t_icon:
          description: the preview of the photo in icon version, the value is taken only if its a photo message
          type: string
          format: binary
    chat:
      title: chat
      description: the chat between two users or more users
      type: object
      properties:
        c_id:
          description: unique identifier
          type: integer
        c_userIds:
          description: the id of the user of the chat
          type: array
          minItems: 1
          maxItems: 32
          items:
            $ref: '#/components/schemas/user'
        c_textMessageList:
          description: the ids of the messages sent in this conversation
          type: array
          minItems: 0
          maxItems: 1028
          items:
            $ref: '#/components/schemas/textMessage'
        c_receiver:
          description: the ids of the receiver of the message
          type: array
          minItems: 0
          maxItems: 32
          items:
            $ref: '#/components/schemas/user'
  securitySchemes:
    BearerAuth: 
      type: http 
      scheme: bearer 
      bearerFormat: JWT   
tags:
  - name: "user profile"  
    description: "operations related to the management of the users personal profile"
  - name: "chat management" 
    description: "operations related to the management of the chats"
  - name: "message management" 
    description: "operation related to the management of the messages"
paths:
  /session:
    post:
      tags: ["user profile"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              description: temp
              type: object
              properties:
                l_name:
                  type: string
                  pattern: 'Ë†.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                description: temp
                type: object
                properties:
                  l_identifier:
                    type: string
                    pattern: '^.*?$'
                    minLength: 1
                    maxLength: 32
  /user/{id}/MyUserName:
    post:
      tags: ["user profile"]
      summary: set the username of the user
      description: |
         sets the username
      operationId: setMyUserName 
      security:
        - BearerAuth: []   
      parameters:
      - name: id
        in: path
        description: id utente
        required: true
        schema:
          description: temp
          type: object
          properties:
            un_id:
              type: integer
      requestBody: 
        description: new username
        content:
          application/json:
            schema:
              description: temp
              type: object
              properties:
                un_name:
                  type: string
                  pattern: '^.*?$'
                  minLength: 1
                  maxLength: 32
        required: true
      responses:
        '201': 
          description: username successfully set 
          content:
            application/json:
              schema:
                type: object
                properties:
                  un_username:
                    type: string
                    pattern: '^.*?$'
                    minLength: 1
                    maxLength: 32
        '401':
          description: not logged in
        '403':
          description: username already exist
        '406': 
          description: invalid username
  
  /user/{id}/MyConversations:
    get:
      tags: [chat management]
      summary: gets all the conversationof the user
      description: |
         gets all the conversation of the user 
      operationId: getMyConversations
      security:
        - BearerAuth: []   
      parameters:
      - name: id
        in: path
        description: id utente
        required: true
        schema:
          type: object
          properties:
            mc_name:
              type: integer
      responses:
        '200':
          description: list of the users chat
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 32
                items:
                  $ref: '#/components/schemas/chat'
        '401':
          description: not logged in
        '404': 
          description: The requested resource could not be found but may be available in the future

  /user/{id}/Conversation/{conversationId}:
    get:
      tags: [chat management]
      summary: gets a conversation of the user
      description: |
         gets a the conversation of the user 
      operationId: getConversation
      security:
        - BearerAuth: []   
      parameters:
        - name: conversationId 
          in: path
          description: id of the conversation we are searching for
          schema:
            type: integer
          required: true
        - name: id
          in: path
          description: id utente
          required: true
          schema:
            type: object
            properties:
              c_id:
                type: integer
      responses:
        '200':
          description: list of the message in the chat
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 1028
                items:
                  $ref: '#/components/schemas/textMessage'
        '401':
          description: not logged in
        '404': 
          description: The requested resource could not be found but may be available in the future
        '406': 
          description: invalid id
  /user/{id}/Conversation/{conversationId}/SMessage:
    post:
      tags: ["message management"]
      summary: deliver a message in a chat. If delivered, return the message
      description: |
        send a message to a chat or a group
      operationId: sendMessage
      security:
        - BearerAuth: []   
      parameters:
      - name: id
        in: path
        description: id utente
        required: true
        schema:
          type: object
          properties:
            sm_id:
              type: integer
      - name: conversationId
        in: path
        description: id conversazione
        required: true
        schema:
          type: object
          properties:
            sm_name:
              type: integer
      requestBody:
        description: new message
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/textMessage'
        required: true
      responses:
        '201': 
          description: message successfully sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/textMessage'
        '401':
          description: not logged in
  /user/{id}/Conversation/FMessage:
    post:
      tags: ["message management"]
      summary: send a text from a chat to another
      description: send a text from a chat to another, if successful returns the message sent
      operationId: forwardMessage
      security:
        - BearerAuth: []   
      parameters:
      - name: id
        in: path
        description: id utente
        required: true
        schema:
          type: object
          properties:
            fm_id:
              type: integer
      requestBody: 
        description: message to forward
        content:
          application/json:
            schema:
              type: object
              properties:
                fm_message:
                  $ref: '#/components/schemas/textMessage'
                fm_forwardChat:
                  $ref: '#/components/schemas/chat'
        required: true
      responses:
        '201':
          description: message forwarded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/textMessage'
        '401':
          description: not logged in
        '406': 
          description: invalid text
  /user/{id}/Conversation/{conversationId}/CMessage:
    post:
      tags: ["message management"]
      summary: comment another message
      description: comment another message, if successfull returns the new message
      operationId: commentMessage
      security:
        - BearerAuth: []   
      parameters:
      - name: id
        in: path
        description: id utente
        required: true
        schema:
          type: object
          properties:
            cm_id:
              type: integer
      - name: conversationId
        in: path
        description: id conversation
        required: true
        schema:
          type: object
          properties:
            cm_con_id:
              type: integer
      requestBody: 
        description: message to comment
        content:
          application/json:
            schema:
              type: object
              properties:
                cm_messageToComment:
                  $ref: '#/components/schemas/textMessage'
                cm_comment:
                  $ref: '#/components/schemas/textMessage'
        required: true
      responses:
        '201': 
          description: message commented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/textMessage'
        '401':
          description: not logged in
        '406': 
          description: invalid text
  /user/{id}/Conversation/{conversationId}/UMessage/{messageId}:
    delete:
      tags: ["message management"]
      summary: uncomment another message
      description: uncomment another message
      operationId: uncommentMessage
      security:
        - BearerAuth: []   
      parameters:
      - name: id
        in: path
        description: id utente
        required: true
        schema:
          type: object
          properties:
            um_id:
              type: integer
      - name: conversationId
        in: path
        description: id conversation
        required: true
        schema:
          type: object
          properties:
            um_con_id:
              type: integer
      - name: messageId
        in: path
        description: id message
        required: true
        schema:
          type: object
          properties:
            um_mes:id:
              type: integer
      responses:
        '204': 
          description: comment successfully uncommented
        '401':
          description: not logged in
        '403':
          description: unauthorized to delete this message
        '404':
          description: The requested resource could not be found 
  /user/{id}/Conversation/{conversationId}/DMessage/{messageId}:
    delete:
      tags: ["message management"]
      summary: deletes a message
      description: delete a message previusly sent
      operationId: deleteMessage
      security:
        - BearerAuth: []   
      parameters:
      - name: id
        in: path
        description: id utente
        required: true
        schema:
          type: object
          properties:
            dm_id:
              type: integer
      - name: conversationId
        in: path
        description: id conversation
        required: true
        schema:
          type: object
          properties:
            dm_con_id:
              type: integer
      - name: messageId
        in: path
        description: id message
        required: true
        schema:
          type: object
          properties:
            dm_mes_id:
              type: integer
      responses:
        '204': 
          description: message successfully deleted
        '401':
          description: not logged in
        '403':
          description: unauthorized to delete this message
        '404':
          description: The requested resource could not be found 
  /user/{id}/AGroup:
    post:
      tags: ["chat management"]
      summary: add a user to a group
      description: add a user to a group. If successful returns the group
      operationId: addToGroup
      security:
        - BearerAuth: []   
      parameters:
      - name: id
        in: path
        description: id utente
        required: true
        schema:
          type: object
          properties:
            adg_id:
              type: integer
      requestBody:
        description: the user to add and the group where he is going to be added
        content:
          application/json:
            schema:
              type: object
              properties:
                adg_user:
                  $ref: '#/components/schemas/user'
                adg_group:
                  $ref: '#/components/schemas/chat'
        required: true
      responses:
        '201':
          description: user added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat'
        '401':
          description: not logged in
        '403':
          description: not authorized
        '406': 
          description: invalid user
  /user/{id}/LGroup:
    post:
      tags: ["chat management"]
      summary: the user leaves the group
      description: the user leaves the group
      operationId: leaveGroup
      security:
        - BearerAuth: []   
      parameters:
      - name: id
        in: path
        description: id utente
        required: true
        schema:
          type: object
          properties:
            lg_id:
              type: integer
      requestBody:
        description:  the group that the user want to leave
        content:
          application/json:
            schema:
              type: object
              properties:
                lg_group: 
                  $ref: '#/components/schemas/chat'
        required: true
      responses:
        '204': 
          description: user left the group
        '401':
          description: not logged in
        '406': 
          description: invalid group
  /user/{id}/Conversation/{conversationId}/GroupName:
    post:
      tags: ["chat management"]
      summary: change the name of a group
      description: change the name of a group . If successful returns the group
      operationId: setGroupName
      security:
        - BearerAuth: []   
      parameters:
      - name: id
        in: path
        description: id utente
        required: true
        schema:
          type: object
          properties:
            sgn_id:
              type: integer
      - name: conversationId
        in: path
        description: id conversation
        required: true
        schema:
          type: object
          properties:
            sgn_con_id:
              type: integer
      requestBody:
        description: the group where he is going to change the name and the new name
        content:
          application/json:
            schema:
              type: object
              properties:
                sgn_group:
                  $ref: '#/components/schemas/chat'
                sgn_name:
                  type: string
                  pattern: '^.*?$'
                  minLength: 1
                  maxLength: 32
        required: true
      responses:
        '201':
          description: group name changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat'
        '401':
          description: not logged in
        '403':
          description: not authorized
  /user/{id}/MyPhoto:
    post:
      tags: ["user profile"]
      summary: set the photo of the user
      description: change the photo of the user, if successful returns the user
      operationId: setMyPhoto
      security:
        - BearerAuth: []   
      parameters:
      - name: id
        in: path
        description: id utente
        required: true
        schema:
          type: object
          properties:
            smp_id:
              type: integer
      requestBody:
        description: the new photo
        content:
          application/json:
            schema:
              type: object
              properties:
                smp_photo:
                  type: string
                  format: binary
        required: true
      responses:
        '201': 
          description: photo changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          description: not logged in
  /user/{id}/Conversation/{conversationId}/GroupPhoto:
    post:
      tags: ["chat management"]
      summary: change the photo of the group
      description: change the photo of the group, if successful returns the group
      operationId: setGroupPhoto
      security:
        - BearerAuth: []   
      parameters:
      - name: id
        in: path
        description: id utente
        required: true
        schema:
          type: object
          properties:
            sgp_id:
              type: integer
      - name: conversationId
        in: path
        description: id conversation
        required: true
        schema:
          type: object
          properties:
            sgp_con_id:
              type: integer
      requestBody:
        description: the new photo and the group
        content:
          application/json:
            schema:
              type: object
              properties:
                sgp_photo:
                  type: string
                  format: binary
                sgp_group: 
                  $ref: '#/components/schemas/chat'
        required: true
      responses:
        '201': 
          description: photo changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat'
        '401':
          description: not logged in
        '403':
          description: not authorized