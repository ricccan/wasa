openapi: 3.0.0
info: 
  description: WASAText exam project Rest API
  title: WASAText
  version: 1.0.0
servers:
- url: http://localhost:3000
components:
  schemas:
    user:
      title: user
      description: "This object represent the unique name of the user (\"user\")."
      type: object
      properties:
        id:
          description: unique identifier
          type: integer
        username:
          description: Unique name of the user
          type: string
          pattern: '^.*?$'
          example: ricc
          minLength: 1
          maxLength: 32
        profileImage:
          description: profile picture of the user
          type: string
          format: binary
        bio:
          description: biography of the user
          type: string
          example: 18y/o italian
        firstName:
          description: the real name of the user 
          type: string
          example: roberto
        lastName:
          description: the real surname of the user
          type: string
          example: rossi
    textMessage:
      title: text message
      description: a simple text between users
      type: object
      properties:
        id: 
          description: unique identifier
          type: integer
          example: 1
        textContent:
          description: the text content of the message
          type: string
          example: ciao come stai
          minLength: 0
          maxLength: 256
        preview: 
          description: the snippet of the text
          type: string
          example: ciao com-
        sender:
          description: the username of the user who has sent the message
          type: string
          example: ricc
        date:
          description: the date of the sent message 
          type: number
          example: 11052024
        checkmark:
          description: the graphic rappresentation of the state of the message, seen or just delivered
          type: integer
          enum: [1, 2]
          example: 1
        responseTo:
          description: if the text is a reaction to another message, here is the id of that message. zero means that it isn t a response to another message
          type: integer
          example: 0
        photoContent:
          description: the url of the photo, if its empty then this is a simple text message
          type: string
          format: binary
        icon:
          description: the preview of the photo in icon version, the value is taken only if its a photo message
          type: string
          format: binary
    chat:
      title: chat
      description: the chat between two users or more users
      type: object
      properties:
        id:
          description: unique identifier
          type: integer
          example: 89
        userIds:
          description: the id of the user of the chat
          type: array
          items:
            $ref: '#/components/schemas/user'
          example: 1
        textMessageList:
          description: the ids of the messages sent in this conversation
          type: array
          items:
            $ref: '#/components/schemas/textMessage'
        receiver:
          type: array
          items:
            $ref: '#/components/schemas/user'
  securitySchemes:
    BearerAuth: 
      type: http 
      scheme: bearer 
      bearerFormat: JWT   
tags:
  - name: "user profile"  
    description: "operations related to the management of the users personal profile"
  - name: "chat management" 
    description: "operations related to the management of the chats"
  - name: "message management" 
    description: "operation related to the management of the messages"
paths:
  /session:
    post:
      tags: ["user profile"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: 'Ë†.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: string
                    example: "abcdef012345"
  /user/{id}/setMyUserName:
    post:
      tags: ["user profile"]
      summary: set the username of the user
      description: |
         sets the username
      operationId: setMyUserName 
      parameters:
      - name: id
        in: path
        description: id utente
        required: true
        schema:
          type: object
          properties:
            name:
              type: integer
      requestBody: 
        description: new username
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: frabev
                  pattern: '^.*?$'
                  minLength: 1
                  maxLength: 32
        required: true
      responses:
        '201': 
          description: username successfully set 
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    pattern: '^.*?$'
                    example: frabev
        '401':
          description: not logged in
        '403':
          description: username already exist
        '406': 
          description: invalid username
  
  /user/{id}/getMyConversations:
    get:
      tags: [chat management]
      summary: gets all the conversationof the user
      description: |
         gets all the conversation of the user 
      operationId: getMyConversations
      parameters:
      - name: id
        in: path
        description: id utente
        required: true
        schema:
          type: object
          properties:
            name:
              type: integer
      responses:
        '200':
          description: list of the users chat
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/chat'
        '401':
          description: not logged in
        '404': 
          description: The requested resource could not be found but may be available in the future

  /user/{id}/getConversation/{conversationId}:
    get:
      tags: [chat management]
      summary: gets a conversation of the user
      description: |
         gets a the conversation of the user 
      operationId: getConversation
      parameters:
        - name: conversationId 
          in: path
          description: id of the conversation we are searching for
          schema:
            type: integer
            example: 12
          required: true
        - name: id
          in: path
          description: id utente
          required: true
          schema:
            type: object
            properties:
              name:
                type: integer
      responses:
        '200':
          description: list of the message in the chat
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/textMessage'
        '401':
          description: not logged in
        '404': 
          description: The requested resource could not be found but may be available in the future
        '406': 
          description: invalid id
  /user/{id}/getConversation/{conversationId}/sendMessage:
    post:
      tags: ["message management"]
      summary: deliver a message in a chat. If delivered, return the message
      description: |
        send a message to a chat or a group
      operationId: sendMessage
      parameters:
      - name: id
        in: path
        description: id utente
        required: true
        schema:
          type: object
          properties:
            name:
              type: integer
      - name: conversationId
        in: path
        description: id conversazione
        required: true
        schema:
          type: object
          properties:
            name:
              type: integer
      requestBody:
        description: new message
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/textMessage'
        required: true
      responses:
        '201': 
          description: message successfully sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/textMessage'
        '401':
          description: not logged in
  /user/{id}/getConversation/forwardMessage:
    post:
      tags: ["message management"]
      summary: send a text from a chat to another
      description: send a text from a chat to another, if successful returns the message sent
      operationId: forwardMessage
      parameters:
      - name: id
        in: path
        description: id utente
        required: true
        schema:
          type: object
          properties:
            name:
              type: integer
      requestBody: 
        description: message to forward
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  $ref: '#/components/schemas/textMessage'
                forwardChat:
                  $ref: '#/components/schemas/chat'
        required: true
      responses:
        '201':
          description: message forwarded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/textMessage'
        '401':
          description: not logged in
        '406': 
          description: invalid text
  /user/{id}/getConversation/{conversationId}/commentMessage:
    post:
      tags: ["message management"]
      summary: comment another message
      description: comment another message, if successfull returns the new message
      operationId: commentMessage
      parameters:
      - name: id
        in: path
        description: id utente
        required: true
        schema:
          type: object
          properties:
            name:
              type: integer
      - name: conversationId
        in: path
        description: id conversation
        required: true
        schema:
          type: object
          properties:
            name:
              type: integer
      requestBody: 
        description: message to comment
        content:
          application/json:
            schema:
              type: object
              properties:
                messageToComment:
                  $ref: '#/components/schemas/textMessage'
                comment:
                  $ref: '#/components/schemas/textMessage'
        required: true
      responses:
        '201': 
          description: message commented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/textMessage'
        '401':
          description: not logged in
        '406': 
          description: invalid text
  /user/{id}/getConversation/{conversationId}/uncommentMessage/{messageId}:
    delete:
      tags: ["message management"]
      summary: uncomment another message
      description: uncomment another message
      operationId: uncommentMessage
      parameters:
      - name: id
        in: path
        description: id utente
        required: true
        schema:
          type: object
          properties:
            name:
              type: integer
      - name: conversationId
        in: path
        description: id conversation
        required: true
        schema:
          type: object
          properties:
            name:
              type: integer
      - name: messageId
        in: path
        description: id message
        required: true
        schema:
          type: object
          properties:
            name:
              type: integer
      #requestBody: 
      #  description: message to uncomment
      #  content:
      #    application/json:
      #      schema:
      #        type: object
      #        properties:
      #          messageToUncomment:
      #            $ref: '#/components/schemas/textMessage'
      #  required: true
      responses:
        '201': 
          description: comment successfully deleted
        '401':
          description: not logged in
        '403':
          description: unauthorized to delete this message
        '404':
          description: The requested resource could not be found 
  /user/{id}/getConversation/{conversationId}/deleteMessage/{messageId}:
    delete:
      tags: ["message management"]
      summary: deletes a message
      description: delete a message previusly sent
      operationId: deleteMessage
      parameters:
      - name: id
        in: path
        description: id utente
        required: true
        schema:
          type: object
          properties:
            name:
              type: integer
      - name: conversationId
        in: path
        description: id conversation
        required: true
        schema:
          type: object
          properties:
            name:
              type: integer
      - name: messageId
        in: path
        description: id message
        required: true
        schema:
          type: object
          properties:
            name:
              type: integer
      #requestBody: 
      #  description: message to delete
      #  content:
      #    application/json:
      #      schema:
      #        type: object
      #        properties:
      #          messageToDelete:
      #            $ref: '#/components/schemas/textMessage'
      #  required: true
      responses:
        '201': 
          description: message successfully deleted
        '401':
          description: not logged in
        '403':
          description: unauthorized to delete this message
        '404':
          description: The requested resource could not be found 
  /user/{id}/addToGroup:
    post:
      tags: ["chat management"]
      summary: add a user to a group
      description: add a user to a group. If successful returns the group
      operationId: addToGroup
      parameters:
      - name: id
        in: path
        description: id utente
        required: true
        schema:
          type: object
          properties:
            name:
              type: integer
      requestBody:
        description: the user to add and the group where he is going to be added
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  $ref: '#/components/schemas/user'
                group:
                  $ref: '#/components/schemas/chat'
        required: true
      responses:
        '201':
          description: user added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat'
        '401':
          description: not logged in
        '403':
          description: not authorized
        '406': 
          description: invalid user
  /user/{id}/leaveGroup:
    post:
      tags: ["chat management"]
      summary: the user leaves the group
      description: the user leaves the group
      operationId: leaveGroup
      parameters:
      - name: id
        in: path
        description: id utente
        required: true
        schema:
          type: object
          properties:
            name:
              type: integer
      requestBody:
        description:  the group that the user want to leave
        content:
          application/json:
            schema:
              type: object
              properties:
                group: 
                  $ref: '#/components/schemas/chat'
        required: true
      responses:
        '201': 
          description: user left the group
        '401':
          description: not logged in
        '406': 
          description: invalid group
  /user/{id}/getConversation/{conversationId}/setGroupName:
    post:
      tags: ["chat management"]
      summary: change the name of a group
      description: change the name of a group . If successful returns the group
      operationId: setGroupName
      parameters:
      - name: id
        in: path
        description: id utente
        required: true
        schema:
          type: object
          properties:
            name:
              type: integer
      - name: conversationId
        in: path
        description: id conversation
        required: true
        schema:
          type: object
          properties:
            name:
              type: integer
      requestBody:
        description: the group where he is going to change the name and the new name
        content:
          application/json:
            schema:
              type: object
              properties:
                group:
                  $ref: '#/components/schemas/chat'
                name:
                  type: string
                  example: i fratelli
                  pattern: '^.*?$'
                  minLength: 1
                  maxLength: 32
        required: true
      responses:
        '201':
          description: group name changed
        '401':
          description: not logged in
        '403':
          description: not authorized
  /user/{id}/setMyPhoto:
    post:
      tags: ["user profile"]
      summary: set the photo of the user
      description: change the photo of the user
      operationId: setMyPhoto
      parameters:
      - name: id
        in: path
        description: id utente
        required: true
        schema:
          type: object
          properties:
            name:
              type: integer
      requestBody:
        description: the new photo
        content:
          application/json:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  format: binary
        required: true
      responses:
        '201': 
          description: photo changed
        '401':
          description: not logged in
  /user/{id}/getConversation/{conversationId}/setGroupPhoto:
    post:
      tags: ["chat management"]
      summary: change the photo of the group
      description: change the photo of the group
      operationId: setGroupPhoto
      parameters:
      - name: id
        in: path
        description: id utente
        required: true
        schema:
          type: object
          properties:
            name:
              type: integer
      - name: conversationId
        in: path
        description: id conversation
        required: true
        schema:
          type: object
          properties:
            name:
              type: integer
      requestBody:
        description: the new photo and the group
        content:
          application/json:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  format: binary
                group: 
                  $ref: '#/components/schemas/chat'
        required: true
      responses:
        '201': 
          description: photo changed
        '401':
          description: not logged in
        '403':
          description: not authorized