openapi: 3.0.0
info: 
  description: WASAText exam project Rest API
  title: WASAText
  version: 1.0.0
servers:
- url: http://localhost:3000
components:
  schemas:
    user:
      title: user
      description: "This object represent the unique name of the user (\"user\")."
      type: object
      properties:
        username:
          description: Unique name of the user
          type: string
          example: ricc
          minLength: 1
          maxLength: 32
        profileImage:
          description: profile picture of the user
          type: string
          example: https://media.istockphoto.com/id/1602458519/it/foto/esplosione-di-polvere-colorata-su-sfondo-bianco.jpg?s=612x612&w=0&k=20&c=p8zsmnvNd6Nj2I0cTE8esB79X_CnjkwH4FUTp3U9_eA=
        bio:
          description: biography of the user
          type: string
          example: 18y/o italian
        firstName:
          description: the real name of the user 
          type: string
          example: roberto
        lastName:
          description: the real surname of the user
          type: string
          example: rossi
    textMessage:
      title: text message
      description: a simple text between users
      type: object
      properties:
        id: 
          description: unique identifier
          type: integer
          example: 1
        textContent:
          description: the text content of the message
          type: string
          example: ciao come stai
          minLength: 0
          maxLength: 256
        preview: 
          description: the snippet of the text
          type: string
          example: ciao com-
        sender:
          description: the username of the user who has sent the message
          type: string
          example: ricc
        date:
          description: the date of the sent message 
          type: number
          example: 11052024
        checkmark:
          description: the graphic rappresentation of the state of the message, seen or just delivered
          type: integer
          enum: [1, 2]
          example: 1
        responseTo:
          description: if the text is a reaction to another message, here is the id of that message. zero means that it isn t a response to another message
          type: integer
          example: 0
        photoContent:
          description: the url of the photo, if its empty then this is a simple text message
          type: string
          example: https://immagine.png
        icon:
          description: the preview of the photo in icon version, the value is taken only if its a photo message
          type: string
          example: https://icon.png
    chat:
      title: chat
      description: the chat between two users or more users
      type: object
      properties:
        id:
          description: unique identifier
          type: integer
          example: 89
        userIds:
          description: the id of the user of the chat
          type: array
          items: 
            $ref: '#/components/schemas/user'
          example: 1
        textMessageList:
          description: the ids of the messages sent in this conversation
          type: array
          items:
            $ref: '#/components/schemas/textMessage'
        receiver:
          description: the id of the users who has received the message (it has to be one of the two user of the chat)
          type: array
          items:
            $ref: '#/components/schemas/user'
          
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: 'Ë†.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    # change here if you decide to use an integer
                    # or any other type of identifier
                    type: string
                    example: "abcdef012345"
  /setMyUserName:
    post:
      tags: ["set username"]
      summary: set the username of the user
      description: |
         sets the username
      operationId: setMyUserName  
      requestBody: #input
        description: new username
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: frabev
                  minLength: 0
                  maxLength: 32
        required: true
      responses:
        '201': #output
          description: username successfully set 
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    example: frabev
        '401':
          description: not logged in
        '403':
          description: username already exist
        '404': 
          description: The requested resource could not be found but may be available in the future
        '406': 
          description: invalid username
  
  /getMyConversations:
    get:
      tags: [get conversation]
      summary: gets all the conversationof the user
      description: |
         gets all the conversation of the user 
      operationId: getMyConversations
      responses:
        '200':
          description: list of the users chat
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/chat'
        '401':
          description: not logged in
        '404': 
          description: The requested resource could not be found but may be available in the future

  /getConversation/{conversationId}:
    get:
      tags: [get conversation]
      summary: gets a conversation of the user
      description: |
         gets a the conversation of the user 
      operationId: getConversation
      parameters:
        - name: conversationId 
          in: path
          description: id of the conversation we are searching for
          schema:
            type: integer
            example: 12
          required: true
      responses:
        '200':
          description: list of the message in the chat
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/textMessage'
        '401':
          description: not logged in
        '404': 
          description: The requested resource could not be found but may be available in the future
        '406': 
          description: invalid id